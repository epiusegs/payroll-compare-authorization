generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountProviderType {
  oauth
  email
  credentials
}

enum AccountProviderIds {
  cognito
}

model Client {
  id                   String       @id @default(cuid())
  createdAt            DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime?    @updatedAt @db.Timestamptz(6)
  name                 String       @unique
  clientUsers          ClientUser[]
  currentSelectedUsers User[] // these are the users that have selected this client
}

model User {
  id               String       @id @default(cuid())
  createdAt        DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime?    @updatedAt @db.Timestamptz(6)
  name             String?
  email            String?      @unique
  emailVerified    DateTime?
  image            String?
  selectedClientId String?
  selectedClient   Client?      @relation(fields: [selectedClientId], references: [id])
  clientUsers      ClientUser[]
  userRoles        UserRole[]
  Account          Account[]
  Session          Session[]
}

model Role {
  id        String     @id @default(cuid())
  clientId  String?
  createdAt DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt DateTime?  @updatedAt @db.Timestamptz(6)
  name      String
  userRoles UserRole[]
}

model Account {
  id                String              @id @default(cuid())
  createdAt         DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime?           @updatedAt @db.Timestamptz(6)
  userId            String
  type              AccountProviderType
  provider          AccountProviderIds
  providerAccountId String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime? @updatedAt @db.Timestamptz(6)
  userId       String
  sessionToken String    @unique
  expires      DateTime  @db.Timestamptz(6)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime? @updatedAt @db.Timestamptz(6)
  identifier String
  expires    DateTime  @db.Timestamptz(6)
  token      String    @unique

  @@unique([identifier, token])
}

model UserRole {
  id        String    @id @default(cuid())
  clientId  String?
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime? @updatedAt @db.Timestamptz(6)
  userId    String
  roleId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model ClientUser {
  id        String    @id @default(cuid())
  clientId  String
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime? @updatedAt @db.Timestamptz(6)
  userId    String
  client    Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
